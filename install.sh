#!/bin/bash

# Oplog Analyzer Installation Script for Mac/Linux
# This script installs oplog-analyzer to ~/.local/bin and sets up necessary configurations

set -e  # Exit on any error

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
INSTALL_DIR="$HOME/.local/bin"
SCRIPT_NAME="oplog-analyzer"
JAR_NAME="OplogAnalyzer.jar"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    printf "${1}${2}${NC}\n"
}

print_color $BLUE "┌─────────────────────────────────────────────┐"
print_color $BLUE "│         Oplog Analyzer Installer           │"
print_color $BLUE "│      MongoDB Oplog Analysis Tool           │"
print_color $BLUE "└─────────────────────────────────────────────┘"
echo

# Check if Java is installed
print_color $BLUE "Checking Java installation..."
if ! command -v java &> /dev/null; then
    print_color $RED "Error: Java is not installed or not in PATH."
    print_color $YELLOW "Please install Java 8 or later and try again."
    print_color $YELLOW "  On macOS: brew install openjdk"
    print_color $YELLOW "  On Ubuntu: sudo apt install default-jdk"
    exit 1
fi

# Check Java version
JAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
# Handle version format for Java 8 and below (1.8, 1.7, etc)
if [[ $JAVA_VERSION == "1" ]]; then
    JAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f2)
fi

if [[ $JAVA_VERSION -lt 8 ]]; then
    print_color $RED "Error: Java 8 or later is required. Found version: $JAVA_VERSION"
    exit 1
fi

print_color $GREEN "✓ Java version found"

# Build the project if JAR doesn't exist
if [ ! -f "$SCRIPT_DIR/bin/$JAR_NAME" ]; then
    print_color $YELLOW "JAR file not found. Building project..."
    cd "$SCRIPT_DIR"
    mvn clean package
    if [ ! -f "$SCRIPT_DIR/bin/$JAR_NAME" ]; then
        print_color $RED "Error: Build failed or JAR file not found at $SCRIPT_DIR/bin/$JAR_NAME"
        exit 1
    fi
fi

# Check if this is an update
if [ -f "$INSTALL_DIR/$SCRIPT_NAME" ]; then
    print_color $YELLOW "Existing installation found. Updating..."
else
    print_color $BLUE "Installing Oplog Analyzer..."
fi

# Create directories
mkdir -p "$INSTALL_DIR"

# Get absolute path to JAR (no copying - use directly from source)
JAR_ABS_PATH="$SCRIPT_DIR/bin/$JAR_NAME"

# Create wrapper script that points to the current directory's JAR
print_color $BLUE "Creating wrapper script with path: $JAR_ABS_PATH"
cat > "$INSTALL_DIR/$SCRIPT_NAME" << EOF
#!/bin/bash

# Oplog Analyzer wrapper script
# This script was generated by install.sh in $SCRIPT_DIR
JAR_FILE="$JAR_ABS_PATH"

if [[ ! -f "\$JAR_FILE" ]]; then
    echo "Error: Oplog Analyzer JAR file not found at \$JAR_FILE"
    echo "The JAR may have been moved or deleted."
    echo "Please run install.sh again from the oplog-analyzer directory."
    exit 1
fi

# Check if no arguments provided or just --help
if [ \$# -eq 0 ] || [ "\$1" = "--help" ] || [ "\$1" = "-h" ]; then
    # Run with --help to show subcommands
    exec java -jar "\$JAR_FILE" --help
else
    # Pass all arguments to the JAR
    exec java -jar "\$JAR_FILE" "\$@"
fi
EOF

# Make script executable
chmod +x "$INSTALL_DIR/$SCRIPT_NAME"

print_color $GREEN "✓ Oplog Analyzer installed successfully!"
print_color $BLUE "Using JAR at: $JAR_ABS_PATH"
echo

# Check if the install directory is in PATH
if [[ ":$PATH:" == *":$INSTALL_DIR:"* ]]; then
    print_color $GREEN "✓ $INSTALL_DIR is already in your PATH"
    echo
    
    # Verify installation
    print_color $BLUE "Verifying installation..."
    if command -v oplog-analyzer &> /dev/null; then
        print_color $GREEN "✓ oplog-analyzer command is available"
        echo
    fi
else
    print_color $YELLOW "⚠️  $INSTALL_DIR is not in your PATH"
    echo
    print_color $BLUE "To add it to your PATH, add this line to your shell profile:"
    echo
    
    # Detect shell and provide appropriate instructions
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo "    echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.zshrc"
        echo "    source ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo "    echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc"
        echo "    source ~/.bashrc"
    else
        echo "    export PATH=\"\$HOME/.local/bin:\$PATH\""
        echo "    # Add the above line to your shell's profile file"
    fi
    
    echo
    print_color $BLUE "Or run this command to add it now:"
    echo
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo "    echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.zshrc && source ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo "    echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc && source ~/.bashrc"
    else
        echo "    export PATH=\"\$HOME/.local/bin:\$PATH\""
    fi
    echo
fi

print_color $GREEN "Installation complete!"
echo
print_color $BLUE "Usage:"
print_color $BLUE "  oplog-analyzer --help                    # Show available subcommands"
print_color $BLUE "  oplog-analyzer scan --help               # Help for historical scan"
print_color $BLUE "  oplog-analyzer tail --help               # Help for real-time tailing"
echo
print_color $BLUE "Examples:"
print_color $BLUE "  # Scan oplog between specific times"
print_color $BLUE "  oplog-analyzer scan -c mongodb://localhost -s 2025-01-01T00:00:00Z -e 2025-01-02T00:00:00Z"
echo
print_color $BLUE "  # Tail oplog in real-time with statistics"
print_color $BLUE "  oplog-analyzer tail -c mongodb://localhost --idStats --topIdCount 50"
echo
print_color $BLUE "  # Tail with size threshold (only show ops >= 1MB)"
print_color $BLUE "  oplog-analyzer tail -c mongodb://localhost -t 1048576"
echo
print_color $BLUE "  # Sharded cluster - analyze all shards in parallel"
print_color $BLUE "  oplog-analyzer scan -c mongodb://mongos:27017 -t 1048576"
echo
print_color $BLUE "  # Sharded cluster - analyze specific shards only (indices 0,2)"
print_color $BLUE "  oplog-analyzer tail -c mongodb://mongos:27017 --shardIndex 0,2 --idStats"
echo
print_color $GREEN "Oplog Analyzer is ready to use!"